{"version":3,"sources":["Contexts/Context.js","utils/api.js","Component/Categories/Categories.js","Component/SubCategories/SubCategories.js","Component/CardItem/CardItem.js","Component/GenrePage/GenrePage.js","App/App.js","serviceWorker.js","index.js"],"names":["DataContext","React","createContext","BaseUrl","getData","url","axios","get","then","response","data","api","getCategories","concat","getSubCategories","categorysId","getCardData","slug","page","apiData","Categories","state","active","categoriesItem","handleCategories","_this","setState","Object","toConsumableArray","map","result","id","name","handleClick","IdCategory","context","getIdCategory","API","this","_this2","_this$state","react_default","a","createElement","Fragment","className","res","key","type","onClick","Component","contextType","SubCategories","subCategories","slugName","getSlugName","loadSubCategoryData","props","title","prevProps","CardItem","href","cardurl","cardTitle","src","cardImg","alt","GenrePage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadingCardData","cards","hasMore","isLoading","articles","length","img","urlToImage","catch","err","error","message","window","onscroll","_assertThisInitialize","assertThisInitialized","_assertThisInitialize2","innerHeight","document","documentElement","scrollTop","offsetHeight","card","Component_CardItem_CardItem","style","color","textAlign","App","handleData","objectSpread","Context","Provider","value","Component_Categories_Categories","Component_SubCategories_SubCategories","Component_GenrePage_GenrePage","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","console","log","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_App","getElementById","URL","process","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0VAIeA,EAFYC,IAAMC,wCCE3BC,EAAO,8BAKPC,EAAU,SAAAC,GAAG,OAAIC,IAAMC,IAAIF,GAAKG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAEjDC,EAAA,CACbC,cAAe,kBAAMR,EAAO,GAAAS,OAAIV,EAAJ,YAC5BW,iBAAkB,SAAAC,GAAW,OAC3BX,EAAO,GAAAS,OAAIV,EAAJ,gBAAAU,OAA0BE,KACnCC,YAAa,SAACC,EAAMC,GAAP,OAAgBd,EATf,SAACa,EAAMC,GACrB,kEAAAL,OAAmEI,EAAnE,UAAAJ,OAAgFK,EAAhF,YAAAL,OALa,oCAawBM,CAAQF,EAAMC,MCX/CE,oNACJC,MAAQ,CACNC,OAAQ,KACRC,eAAgB,MAGlBC,iBAAmB,SAAAd,GACjBe,EAAKC,SAAS,iBAAO,CACnBH,eAAeI,OAAAC,EAAA,EAAAD,CACVjB,EAAKmB,IAAI,SAAAC,GAAM,MAAK,CACrBC,GAAID,EAAOC,GACXC,KAAMF,EAAOE,eAYrBC,YAAc,SAAAC,GACZT,EAAKU,QAAQC,cAAcF,GAC3BT,EAAKC,SAAS,CAAEJ,OAAQY,wFAPxBG,EAAIzB,gBAAgBJ,KAAK8B,KAAKd,mDAUvB,IAAAe,EAAAD,KAAAE,EAC4BF,KAAKjB,MAAhCC,EADDkB,EACClB,OAAQC,EADTiB,EACSjB,eAChB,OACEkB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAChBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,gBACXtB,EAAeM,IAAI,SAAAiB,GAAG,OACrBL,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eAAeE,IAAKD,EAAIf,IACpCU,EAAAC,EAAAC,cAAA,UACEK,KAAK,SACLH,UACEvB,IAAWwB,EAAIf,GAAK,gBAAkB,cAExCkB,QAAS,kBAAMV,EAAKN,YAAYa,EAAIf,MAEnCe,EAAId,oBA5CAkB,cAAnB9B,EAqBG+B,YAAcnD,EAmCRoB,QCvDTgC,oNACJ/B,MAAQ,CACNgC,cAAe,GACf/B,OAAQ,QAIVW,YAAc,SAAAqB,GACZ7B,EAAKU,QAAQoB,YAAYD,GACzB7B,EAAKC,SAAS,CAAEJ,OAAQgC,OAG1BE,oBAAsB,WAAM,IAClBtB,EAAeT,EAAKgC,MAApBvB,WACJA,GACFG,EAAIvB,iBAAiBoB,GAAY1B,KAAK,SAAAE,GACpCe,EAAKC,SAAS,CACZJ,OAAQY,EACRmB,cAAc1B,OAAAC,EAAA,EAAAD,CACTjB,EAAKmB,IAAI,SAAAC,GAAM,MAAK,CACrBC,GAAID,EAAOC,GACX2B,MAAO5B,EAAOE,KACdf,KAAMa,EAAOb,gGAQN0C,GACbA,EAAUzB,aAAeI,KAAKmB,MAAMvB,YACtCI,KAAKkB,uDAIA,IAAAjB,EAAAD,KAAAE,EAC2BF,KAAKjB,MAA/BgC,EADDb,EACCa,cAAe/B,EADhBkB,EACgBlB,OACvB,OACEmB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,mBACXQ,EAAcxB,IAAI,SAAAiB,GAAG,OACpBL,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kBAAkBE,IAAKD,EAAIf,IACvCU,EAAAC,EAAAC,cAAA,UACEK,KAAK,SACLH,UACEvB,IAAWwB,EAAI7B,KAAO,gBAAkB,cAE1CgC,QAAS,kBAAMV,EAAKN,YAAYa,EAAI7B,QAEnC6B,EAAIY,mBAlDOR,cAAtBE,EAKGD,YAAcnD,EAuDRoD,eCnCAQ,SA3BE,SAAAH,GAAK,OACpBhB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,KAAGkB,KAAMJ,EAAMK,SACbrB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eAAeY,EAAMM,WACnCtB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,OAAKqB,IAAKP,EAAMQ,QAASC,IAAI,OAGjCzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kBACZJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASH,UAAU,eAC9BJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,sBAGJF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASH,UAAU,eAC9BJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,4BChBNwB,qBACJ,SAAAA,EAAYV,GAAO,IAAAhC,EAAA,OAAAE,OAAAyC,EAAA,EAAAzC,CAAAW,KAAA6B,IACjB1C,EAAAE,OAAA0C,EAAA,EAAA1C,CAAAW,KAAAX,OAAA2C,EAAA,EAAA3C,CAAAwC,GAAAI,KAAAjC,KAAMmB,KAoCRe,gBAAkB,WAAM,IACdlB,EAAa7B,EAAKgC,MAAlBH,SAEJA,IAAa7B,EAAKJ,MAAMJ,MAC1BQ,EAAKC,SAAS,CAAER,KAAM,EAAGuD,MAAO,GAAIxD,KAAMqC,EAAUoB,SAAS,IAG/DjD,EAAKC,SAAS,CAAEiD,WAAW,GAAQ,WACjCtC,EAAIrB,YAAYsC,GAAY7B,EAAKJ,MAAMJ,KAAMQ,EAAKJ,MAAMH,MACrDV,KAAK,SAAAE,GACJe,EAAKC,SAAS,SAAAL,GAAK,MAAK,CACtBC,OAAQgC,EACRrC,KAAMQ,EAAKJ,MAAMJ,KACjByD,QAAkC,IAAzBhE,EAAKkE,SAASC,OACvBF,WAAW,EACXzD,KAAMG,EAAMH,KAAO,EACnBuD,MAAK,GAAA5D,OAAAc,OAAAC,EAAA,EAAAD,CACAN,EAAMoD,OADN9C,OAAAC,EAAA,EAAAD,CAEAjB,EAAKkE,SAAS/C,IAAI,SAAAC,GAAM,MAAK,CAC9B4B,MAAO5B,EAAO4B,MACdrD,IAAKyB,EAAOzB,IACZyE,IAAKhD,EAAOiD,qBAKnBC,MAAM,SAAAC,GACLxD,EAAKC,SAAS,CACZwD,MAAOD,EAAIE,QACXR,WAAW,SA9DnBlD,EAAKJ,MAAQ,CACX6D,OAAO,EACPR,SAAS,EACTC,WAAW,EACXF,MAAO,GACPnD,OAAQ,KACRJ,KAAM,EACND,KAAM,WAIRmE,OAAOC,SAAW,WAAM,IAAAC,EAAA3D,OAAA4D,EAAA,EAAA5D,CAAAF,GAEpB+C,EAFoBc,EAEpBd,gBAFoBgB,EAAAF,EAGpBjE,MAAS6D,EAHWM,EAGXN,MAAOP,EAHIa,EAGJb,UAAWD,EAHPc,EAGOd,QAOzBQ,GAASP,IAAcD,GAIzBU,OAAOK,YAAcC,SAASC,gBAAgBC,YAC9CF,SAASC,gBAAgBE,cAEzBrB,KAhCa/C,mFA2EjBa,KAAKkC,6DAGYb,GACbA,EAAUL,WAAahB,KAAKmB,MAAMH,UACpChB,KAAKkC,mDAIA,IAAAhC,EACsCF,KAAKjB,MAA1CoD,EADDjC,EACCiC,MAAOE,EADRnC,EACQmC,UAAWO,EADnB1C,EACmB0C,MAAOR,EAD1BlC,EAC0BkC,QACjC,OACEjC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,WAASE,UAAU,QAChB4B,EAAM5C,IAAI,SAAAiE,GAAI,OACbrD,EAAAC,EAAAC,cAACoD,EAAD,CACEhD,IAAK+C,EAAKpC,MACVK,UAAW+B,EAAKpC,MAChBI,QAASgC,EAAKzF,IACd4D,QAAS6B,EAAKhB,SAKnBI,GACCzC,EAAAC,EAAAC,cAAA,OAAKqD,MAAO,CAAEC,MAAO,OAAQC,UAAW,WAAahB,GAEtDP,GACClC,EAAAC,EAAAC,cAAA,OAAKqD,MAAO,CAAEC,MAAO,OAAQC,UAAW,WAAxC,eAEAxB,GACAjC,EAAAC,EAAAC,cAAA,OAAKqD,MAAO,CAAEC,MAAO,OAAQC,UAAW,WAAxC,4CA3GchD,cAAlBiB,EAyEGhB,YAAcnD,EA2CRmE,QCnFAgC,oNAhCb9E,MAAQ,CACNa,WAAY,GACZoB,SAAU,MAGZ8C,WAAa,iBAAO,CAClBlE,WAAYT,EAAKJ,MAAMa,WACvBE,cAAe,SAAAL,GACbN,EAAKC,SAAS,iBAAO,CACnBQ,WAAYH,MAGhBwB,YAAa,SAAAD,GACX7B,EAAKC,SAAS,SAAAL,GAAK,OAAAM,OAAA0E,EAAA,EAAA1E,CAAA,GACdN,EAAMa,WADQ,CAEjBoB,SAAUA,iFAKP,IAAAd,EAC0BF,KAAKjB,MAA9Ba,EADDM,EACCN,WAAYoB,EADbd,EACac,SACpB,OACEb,EAAAC,EAAAC,cAAC2D,EAAYC,SAAb,CAAsBC,MAAOlE,KAAK8D,cAChC3D,EAAAC,EAAAC,cAAC8D,EAAD,MACAhE,EAAAC,EAAAC,cAAC+D,EAAD,CAAexE,WAAYA,IAC3BO,EAAAC,EAAAC,cAACgE,EAAD,CAAWrD,SAAUA,YA3BXJ,cCMZ0D,EAAcC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DAwCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT1G,KAAK,SAAA+G,GACJC,QAAQC,IAAI,oBACZF,EAAaG,cAAgB,WAC3B,IAAMC,EAAmBJ,EAAaK,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtG,QACf+F,UAAUC,cAAcS,YAI1BN,QAAQC,IACN,gHAKEN,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBC,QAAQC,IAAI,sCAGRN,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,UAO5BvC,MAAM,SAAAE,GACLsC,QAAQtC,MAAM,4CAA6CA,KC5FjE+C,IAASC,OAAOzF,EAAAC,EAAAC,cAACwF,EAAD,MAASzC,SAAS0C,eAAe,SDe1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBlD,OAAO0B,SAASjD,MACpD0E,SAAWnD,OAAO0B,SAASyB,OAIvC,OAGFnD,OAAOoD,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAArG,OAAMyH,GAAN,sBAEP1B,GAmEV,SAAiCM,EAAOC,GAEtCsB,MAAMvB,GACH1G,KAAK,SAAAC,GAEJ,IAAMiI,EAAcjI,EAASkI,QAAQpI,IAAI,gBAEnB,MAApBE,EAASmI,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzB,UAAUC,cAAcyB,MAAMtI,KAAK,SAAA+G,GACjCA,EAAawB,aAAavI,KAAK,WAC7B4E,OAAO0B,SAASkC,aAKpB/B,EAAgBC,EAAOC,KAG1BnC,MAAM,WACLwC,QAAQC,IACN,mEAxFAwB,CAAwB/B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAMtI,KAAK,WACjCgH,QAAQC,IACN,+GAMJR,EAAgBC,EAAOC,UAI3BK,QAAQC,IAAI,iCAAkCa,cC1ClDjB,CAAuB5E,EAAAC,EAAAC,cAACwF,EAAD","file":"static/js/main.a9ba318d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const DataContext = React.createContext();\r\n\r\nexport default DataContext;\r\n","import axios from \"axios\";\r\n\r\nconst apiKey = \"8e873620e5d8423aae1ed3d8d839e3e6\";\r\n\r\nconst BaseUrl = `https://api.myjson.com/bins`;\r\n\r\nconst apiData = (slug, page) => {\r\n  return `https://newsapi.org/v2/top-headlines?country=eg&category=${slug}&page=${page}&apiKey=${apiKey}`;\r\n};\r\nconst getData = url => axios.get(url).then(response => response.data);\r\n\r\nexport default {\r\n  getCategories: () => getData(`${BaseUrl}/qk7qi`),\r\n  getSubCategories: categorysId =>\r\n    getData(`${BaseUrl}/6frhm/?cat=${categorysId}`),\r\n  getCardData: (slug, page) => getData(apiData(slug, page))\r\n};\r\n","import React, { Component } from \"react\";\r\nimport API from \"../../utils/api\";\r\nimport \"./Categories.css\";\r\nimport DataContext from \"../../Contexts/Context\";\r\nclass Categories extends Component {\r\n  state = {\r\n    active: null,\r\n    categoriesItem: []\r\n  };\r\n\r\n  handleCategories = data => {\r\n    this.setState(() => ({\r\n      categoriesItem: [\r\n        ...data.map(result => ({\r\n          id: result.id,\r\n          name: result.name\r\n        }))\r\n      ]\r\n    }));\r\n  };\r\n\r\n  componentDidMount() {\r\n    API.getCategories().then(this.handleCategories);\r\n  }\r\n\r\n  static contextType = DataContext;\r\n\r\n  handleClick = IdCategory => {\r\n    this.context.getIdCategory(IdCategory);\r\n    this.setState({ active: IdCategory });\r\n  };\r\n\r\n  render() {\r\n    const { active, categoriesItem } = this.state;\r\n    return (\r\n      <>\r\n        <header className=\"header\">\r\n          <nav className=\"header__navigation\">\r\n            <ul className=\"header__list\">\r\n              {categoriesItem.map(res => (\r\n                <li className=\"header__item\" key={res.id}>\r\n                  <button\r\n                    type=\"button\"\r\n                    className={\r\n                      active === res.id ? \"button-active\" : \"link-button\"\r\n                    }\r\n                    onClick={() => this.handleClick(res.id)}\r\n                  >\r\n                    {res.name}\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </nav>\r\n        </header>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Categories;\r\n","import React, { Component } from \"react\";\r\nimport API from \"../../utils/api\";\r\nimport DataContext from \"../../Contexts/Context\";\r\nimport \"./SubCategories.css\";\r\n\r\nclass SubCategories extends Component {\r\n  state = {\r\n    subCategories: [],\r\n    active: null\r\n  };\r\n  static contextType = DataContext;\r\n\r\n  handleClick = slugName => {\r\n    this.context.getSlugName(slugName);\r\n    this.setState({ active: slugName });\r\n  };\r\n\r\n  loadSubCategoryData = () => {\r\n    const { IdCategory } = this.props;\r\n    if (IdCategory) {\r\n      API.getSubCategories(IdCategory).then(data => {\r\n        this.setState({\r\n          active: IdCategory,\r\n          subCategories: [\r\n            ...data.map(result => ({\r\n              id: result.id,\r\n              title: result.name,\r\n              slug: result.slug\r\n            }))\r\n          ]\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.IdCategory !== this.props.IdCategory) {\r\n      this.loadSubCategoryData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { subCategories, active } = this.state;\r\n    return (\r\n      <nav className=\"header__subnavigation\">\r\n        <ul className=\"header__sublist\">\r\n          {subCategories.map(res => (\r\n            <li className=\"header__subitem\" key={res.id}>\r\n              <button\r\n                type=\"button\"\r\n                className={\r\n                  active === res.slug ? \"button-active\" : \"link-button\"\r\n                }\r\n                onClick={() => this.handleClick(res.slug)}\r\n              >\r\n                {res.title}\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubCategories;\r\n","import React from \"react\";\r\nimport \"./CardItem.css\";\r\n\r\nconst CardItem = props => (\r\n  <div className=\"card__item\">\r\n    <a href={props.cardurl}>\r\n      <h1 className=\"card__title\">{props.cardTitle}</h1>\r\n      <div className=\"card__image\">\r\n        <img src={props.cardImg} alt=\"\" />\r\n      </div>\r\n    </a>\r\n    <div className=\"card__action\">\r\n      <ul className=\"card__iconItem\">\r\n        <li>\r\n          <button type=\"button\" className=\"link-button\">\r\n            <i className=\"fa fa-heart\" />\r\n            <span>save</span>\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button type=\"button\" className=\"link-button\">\r\n            <i className=\"fa fa-share-alt\" />\r\n            <span>share</span>\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default CardItem;\r\n","import React, { Component } from \"react\";\r\nimport CardItem from \"../CardItem/CardItem\";\r\nimport API from \"../../utils/api\";\r\nimport DataContext from \"../../Contexts/Context\";\r\nimport \"./GenrePage.css\";\r\n\r\nclass GenrePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Sets up our initial state\r\n    this.state = {\r\n      error: false,\r\n      hasMore: true,\r\n      isLoading: false,\r\n      cards: [],\r\n      active: null,\r\n      page: 1,\r\n      slug: \"general\"\r\n    };\r\n\r\n    // Binds our scroll event handler\r\n    window.onscroll = () => {\r\n      const {\r\n        loadingCardData,\r\n        state: { error, isLoading, hasMore }\r\n      } = this;\r\n\r\n      // Bails early if:\r\n      // * there's an error\r\n      // * it's already loading\r\n      // * there's nothing left to load\r\n      if (error || isLoading || !hasMore) return;\r\n\r\n      // Checks that the page has scrolled to the bottom\r\n      if (\r\n        window.innerHeight + document.documentElement.scrollTop ===\r\n        document.documentElement.offsetHeight\r\n      ) {\r\n        loadingCardData();\r\n      }\r\n    };\r\n  }\r\n\r\n  loadingCardData = () => {\r\n    const { slugName } = this.props;\r\n\r\n    if (slugName !== this.state.slug) {\r\n      this.setState({ page: 1, cards: [], slug: slugName, hasMore: true });\r\n    }\r\n\r\n    this.setState({ isLoading: true }, () => {\r\n      API.getCardData(slugName || this.state.slug, this.state.page)\r\n        .then(data => {\r\n          this.setState(state => ({\r\n            active: slugName,\r\n            slug: this.state.slug,\r\n            hasMore: data.articles.length !== 0,\r\n            isLoading: false,\r\n            page: state.page + 1,\r\n            cards: [\r\n              ...state.cards,\r\n              ...data.articles.map(result => ({\r\n                title: result.title,\r\n                url: result.url,\r\n                img: result.urlToImage\r\n              }))\r\n            ]\r\n          }));\r\n        })\r\n        .catch(err => {\r\n          this.setState({\r\n            error: err.message,\r\n            isLoading: false\r\n          });\r\n        });\r\n    });\r\n  };\r\n\r\n  static contextType = DataContext;\r\n\r\n  componentDidMount() {\r\n    this.loadingCardData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.slugName !== this.props.slugName) {\r\n      this.loadingCardData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { cards, isLoading, error, hasMore } = this.state;\r\n    return (\r\n      <>\r\n        <section className=\"card\">\r\n          {cards.map(card => (\r\n            <CardItem\r\n              key={card.title}\r\n              cardTitle={card.title}\r\n              cardurl={card.url}\r\n              cardImg={card.img}\r\n            />\r\n          ))}\r\n        </section>\r\n\r\n        {error && (\r\n          <div style={{ color: \"#900\", textAlign: \"center\" }}>{error}</div>\r\n        )}\r\n        {isLoading && (\r\n          <div style={{ color: \"#900\", textAlign: \"center\" }}>Loading...</div>\r\n        )}\r\n        {!hasMore && (\r\n          <div style={{ color: \"#900\", textAlign: \"center\" }}>\r\n            You did it! You reached the end!\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GenrePage;\r\n","import React, { Component } from \"react\";\nimport DataContext from \"../Contexts/Context\";\nimport Categories from \"../Component/Categories/Categories\";\nimport SubCategories from \"../Component/SubCategories/SubCategories\";\nimport GenrePage from \"../Component/GenrePage/GenrePage\";\nimport \"./App.css\";\nclass App extends Component {\n  state = {\n    IdCategory: [],\n    slugName: []\n  };\n\n  handleData = () => ({\n    IdCategory: this.state.IdCategory,\n    getIdCategory: id => {\n      this.setState(() => ({\n        IdCategory: id\n      }));\n    },\n    getSlugName: slugName => {\n      this.setState(state => ({\n        ...state.IdCategory,\n        slugName: slugName\n      }));\n    }\n  });\n\n  render() {\n    const { IdCategory, slugName } = this.state;\n    return (\n      <DataContext.Provider value={this.handleData()}>\n        <Categories />\n        <SubCategories IdCategory={IdCategory} />\n        <GenrePage slugName={slugName} />\n      </DataContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  } else {\n    console.log(\"wont register sw. current env:\", process.env.NODE_ENV);\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      console.log(\"sw is registered\");\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register(<App />);\n"],"sourceRoot":""}